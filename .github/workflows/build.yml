name: Build Pango

on: [push]

jobs:
  build_bin:
    name: Build Pango Windows for Manim
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - msystem: MINGW64
            arch: x86_64
          - msystem: MINGW32
            arch: i686
    steps:
      - uses: msys2/setup-msys2@v2
        name: Setup Msys
        with:
          msystem: ${{ matrix.msystem }}
          install: mingw-w64-${{ matrix.arch }}-pango
          update: true
      - shell: msys2 {0}
        env:
          MSYSTEM: ${{ matrix.msystem }}
        run: |
          mkdir "pango"
          dir "/${MSYSTEM}/bin"
          mv "/${MSYSTEM}/bin" "pango"
          dir "/${MSYSTEM}"

      - uses: actions/upload-artifact@v2
        with:
         name: pango.${{ matrix.msystem }}
         path: pango
 
      - uses: actions/checkout@v2
        with:
          repository: naveen521kk/manim
          ref: 'pango-text'
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install Manim
        run: |
          $soxVersion = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['sox'])"
          $soxVersionNumber = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['sox'].split('-')[1])"
          $ffmpegVersion = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['ffmpeg'])"
          $ffmpegVersionNumber = python -c "import json;print(json.load(open('.github/manimdependency.json'))['windows']['ffmpeg'].split('-')[1])"
          $OriPath = $env:PATH
          echo "Install Tinytex"
          Invoke-WebRequest "https://ci.appveyor.com/api/projects/yihui/tinytex/artifacts/TinyTeX.zip?job=image:%20Visual%20Studio%202019" -O "$($env:TMP)\TinyTex.zip"
          Expand-Archive -LiteralPath "$($env:TMP)\TinyTex.zip" -DestinationPath "$($PWD)\ManimCache\LatexWindows"
          $env:Path = "$($PWD)\ManimCache\LatexWindows\TinyTeX\bin\win32;$($env:PATH)"
          tlmgr install standalone preview doublestroke ms setspace rsfs relsize ragged2e fundus-calligra microtype wasysym physics dvisvgm jknapltx wasy cm-super babel-english
          $env:PATH=$OriPath
          echo "Completed Latex Install Sox"
          Invoke-WebRequest "https://downloads.sourceforge.net/project/sox/sox/$($soxVersionNumber)/$($soxVersion).zip" -UserAgent "wget" -O "$($env:TMP)\SoX.zip"
          7z x "$($env:TMP)\SoX.zip" -o"$($PWD)\ManimCache"
          Move-Item "ManimCache\sox-*" "ManimCache\SoX"
          choco install --no-progress ffmpeg
          $env:Path += ";" + "$($PWD)\ManimCache\LatexWindows\TinyTeX\bin\win32"
          $env:Path += ";" + "$($PWD)\ManimCache\SoX"
          $env:Path += ";" + "$($PWD)\pango\bin"
          $env:Path += ";" + "$($PWD)\pango"
          echo "::set-env name=Path::$env:Path"
      - name: Install Poetry
        shell: cmd
        env:
          POETRY_VIRTUALENVS_CREATE: $false
        run: |
          pip install poetry
          poetry install
          poetry run pytest
          where libpango*
          curl -l https://github.com/naveen521kk/manim/raw/pango-text/example_scenes/pangoText.py -o testpan.py
          poetry run manim testpan.py
 
      - uses: actions/upload-artifact@v2
        with:
         name: media.${{ matrix.msystem }}
         path: media
          
          
